using Microsoft.CodeAnalysis.Testing;
using Uno.UI.SourceGenerators.DependencyObject;
using Microsoft.CodeAnalysis.Testing.Verifiers;
using Uno.UI.SourceGenerators.Tests.Verifiers;
using System.Collections.Immutable;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using Microsoft.CodeAnalysis.Text;
using System.Text;
using Uno.UI.SourceGenerators.Internal.WeakEvent;
using System.Xml.Linq;

namespace Uno.UI.SourceGenerators.Tests.DependencyPropertyGeneratorTests;

using Verify = CSharpIncrementalSourceGeneratorVerifier<WeakEventGenerator>;

[TestClass]
public class Given_WeakEventGenerator
{
	[TestMethod]
	public async Task When_In_DependencyObject()
	{
		var test = new Verify.Test
		{
			IgnoreAccessibility = true,
			TestState =
			{
				Sources =
				{
					$$"""
					using System;
					using Uno.UI.Xaml;
					using Microsoft.UI.Xaml;

					namespace MyNamespace
					{
						public partial class Owner 
						{
						
						}

						public partial class C : DependencyObject
						{
							[global::Uno.UI.Xaml.GeneratedWeakEventAttribute]
							public event EventHandler MyEvent;

							{{ DependencyObjectDeclaration }}
						}
					}
					"""
					,GeneratedWeakEventAttributeDeclaration
				},
				GeneratedSources =
				{
					{
						(typeof(WeakEventGenerator)
						, @"MyNamespace.C_ff60ac57d15aac47cd3b269d3b6ab7ad.cs"
						, SourceText.From("""
						// <auto-generated>
						// ******************************************************************
						// This file has been generated by Uno.UI (WeakEventGenerator)
						// ******************************************************************
						// </auto-generated>
						
						#pragma warning disable 1591 // Ignore missing XML comment warnings
						using System;
						using System.Linq;
						using System.Collections.Generic;
						using System.Collections;
						using System.Diagnostics.CodeAnalysis;
						using Uno.Disposables;
						using System.Runtime.CompilerServices;
						using Uno.UI;
						using Uno.UI.DataBinding;
						using Microsoft.UI.Xaml;
						using Microsoft.UI.Xaml.Controls;
						using Microsoft.UI.Xaml.Data;
						using Uno.Diagnostics.Eventing;
						namespace MyNamespace
						{
							partial class C
							{
								/// <summary> Registers an event handler on the <see ref="MyEvent" /> event</summary>
								/// <remarks>Make sure to register an actual method, not a lambda to ensure that the reference stays alive</remarks>								internal global::System.IDisposable RegisterWeakMyEvent(global::System.EventHandler handler)
								{
									var handlerRef = global::Uno.UI.DataBinding.WeakReferencePool.RentWeakReference(this, handler);
									global::System.EventHandler weakHandler = (sender, e) => 
									{
										if (handlerRef.Target is global::System.EventHandler handler2)
										{
											handler2.Invoke(sender, e);
										}
									}
									;
									MyEvent += weakHandler;
									return global::Uno.Disposables.Disposable.Create(() =>
									{
										MyEvent -= weakHandler;
										global::Uno.UI.DataBinding.WeakReferencePool.ReturnWeakReference(this, handlerRef);
									}
									);
								}
							}
						}
						
						""", Encoding.UTF8))
					}
				}
			},
			ReferenceAssemblies = ReferenceAssemblies.Net.Net70.AddPackages(ImmutableArray.Create(new PackageIdentity("Uno.WinUI", "5.0.118"))),
		};

		await test.RunAsync();
	}

	[TestMethod]
	public async Task When_In_DependencyObject_Expanded_Declaration()
	{
		var test = new Verify.Test
		{
			IgnoreAccessibility = true,
			TestState =
			{
				Sources =
				{
					$$"""
					using System;
					using Uno.UI.Xaml;
					using Microsoft.UI.Xaml;

					namespace MyNamespace
					{
						public partial class C : DependencyObject
						{
							[global::Uno.UI.Xaml.GeneratedWeakEventAttribute]
							public event EventHandler MyEvent { add { } remove { } }

							{{ DependencyObjectDeclaration }}
						}
					}
					"""
					,GeneratedWeakEventAttributeDeclaration
				},
				GeneratedSources =
				{
					{
						(typeof(WeakEventGenerator)
						, @"MyNamespace.C_ff60ac57d15aac47cd3b269d3b6ab7ad.cs"
						, SourceText.From("""
						// <auto-generated>
						// ******************************************************************
						// This file has been generated by Uno.UI (WeakEventGenerator)
						// ******************************************************************
						// </auto-generated>
						
						#pragma warning disable 1591 // Ignore missing XML comment warnings
						using System;
						using System.Linq;
						using System.Collections.Generic;
						using System.Collections;
						using System.Diagnostics.CodeAnalysis;
						using Uno.Disposables;
						using System.Runtime.CompilerServices;
						using Uno.UI;
						using Uno.UI.DataBinding;
						using Microsoft.UI.Xaml;
						using Microsoft.UI.Xaml.Controls;
						using Microsoft.UI.Xaml.Data;
						using Uno.Diagnostics.Eventing;
						namespace MyNamespace
						{
							partial class C
							{
								/// <summary> Registers an event handler on the <see ref="MyEvent" /> event</summary>
								/// <remarks>Make sure to register an actual method, not a lambda to ensure that the reference stays alive</remarks>
								internal global::System.IDisposable RegisterWeakMyEvent(global::System.EventHandler handler)
								{
									var handlerRef = global::Uno.UI.DataBinding.WeakReferencePool.RentWeakReference(this, handler);
									global::System.EventHandler weakHandler = (sender, e) => 
									{
										if (handlerRef.Target is global::System.EventHandler handler2)
										{
											handler2.Invoke(sender, e);
										}
									}
									;
									MyEvent += weakHandler;
									return global::Uno.Disposables.Disposable.Create(() =>
									{
										MyEvent -= weakHandler;
										global::Uno.UI.DataBinding.WeakReferencePool.ReturnWeakReference(this, handlerRef);
									}
									);
								}
							}
						}
						
						""", Encoding.UTF8))
					}
				}
			},
			ReferenceAssemblies = ReferenceAssemblies.Net.Net70.AddPackages(ImmutableArray.Create(new PackageIdentity("Uno.WinUI", "5.0.118"))),
		};

		await test.RunAsync();
	}

	private const string GeneratedWeakEventAttributeDeclaration =
	"""
		using System;

		namespace Uno.UI.Xaml
		{
			/// <summary>
			/// Attribute to control the automatic generation of dependency property generation
			/// </summary>
			[System.AttributeUsage(AttributeTargets.Event, Inherited = false, AllowMultiple = false)]
			internal sealed class GeneratedWeakEventAttribute : Attribute
			{

			}
		}
		
		""";

	private const string DependencyObjectDeclaration =
		"""
		public global::Windows.UI.Core.CoreDispatcher Dispatcher => throw new NotImplementedException();
		public global::Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue => throw new NotImplementedException();
		public object GetValue(global::Microsoft.UI.Xaml.DependencyProperty dp) => throw new NotImplementedException();
		public void SetValue(global::Microsoft.UI.Xaml.DependencyProperty dp, object value) => throw new NotImplementedException();
		public void ClearValue(global::Microsoft.UI.Xaml.DependencyProperty dp) => throw new NotImplementedException();
		public object ReadLocalValue(global::Microsoft.UI.Xaml.DependencyProperty dp) => throw new NotImplementedException();
		public object GetAnimationBaseValue(global::Microsoft.UI.Xaml.DependencyProperty dp) => throw new NotImplementedException();
		public long RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.DependencyProperty dp, global::Microsoft.UI.Xaml.DependencyPropertyChangedCallback callback) => throw new NotImplementedException();
		public void UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.DependencyProperty dp, long token) => throw new NotImplementedException();
		""";

}
