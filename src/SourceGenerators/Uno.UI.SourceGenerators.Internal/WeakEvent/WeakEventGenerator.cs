#nullable enable

using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Uno.Extensions;
using Uno.UI.SourceGenerators.Internal.Extensions;
using Uno.UI.SourceGenerators.XamlGenerator;
using Uno.UI.SourceGenerators.Helpers;
using System.Linq;
using System.Collections.Immutable;
using System.Xml.Linq;

namespace Uno.UI.SourceGenerators.Internal.WeakEvent;

[Generator]
public class WeakEventGenerator : IIncrementalGenerator
{
	private static SymbolDisplayFormat _fullyQualifiedWithoutGlobal = SymbolDisplayFormat.FullyQualifiedFormat.WithGlobalNamespaceStyle(SymbolDisplayGlobalNamespaceStyle.Omitted);

	private record GenerationCandidateData
	{
		public GenerationCandidateData(ISymbol symbol, AttributeData attribute)
		{
			var eventSymbol = symbol as IEventSymbol ?? throw new InvalidOperationException("Symbol must be an event");

			var isDependencyObject = eventSymbol.ContainingType.AllInterfaces
				.Any(t => t.ToDisplayString(_fullyQualifiedWithoutGlobal) == XamlConstants.Types.DependencyObject);

			ContainingTypeIsCandidate = eventSymbol.ContainingType.TypeKind == TypeKind.Class && isDependencyObject;
			ContainingTypeFullyQualifiedName = eventSymbol.ContainingType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
			ContainingTypeHintName = HashBuilder.BuildIDFromSymbol(eventSymbol.ContainingType);
			ContainingNamespace = eventSymbol.ContainingNamespace.ToString();
			ContainingTypeName = eventSymbol.ContainingType.Name;
			EventName = eventSymbol.Name;
			EventType = eventSymbol.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
			LambdaParameters = "";

			if (eventSymbol.Type is INamedTypeSymbol delegateSymbol)
			{
				var invokeMethods = delegateSymbol.GetMethodsWithName("Invoke");

				if (invokeMethods.FirstOrDefault() is { } method)
				{
					LambdaParameters = string.Join(", ", method.Parameters.Select(p => p.Name));
				}
			}
		}

		public bool ContainingTypeIsCandidate { get; }
		public string ContainingTypeFullyQualifiedName { get; }
		public string ContainingTypeHintName { get; }
		public string ContainingNamespace { get; }
		public string ContainingTypeName { get; }
		public string EventName { get; }
		public string EventType { get; }
		public string LambdaParameters { get; }
	}

	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		var attributedSymbolsProvider = context.SyntaxProvider.ForAttributeWithMetadataName(
			"Uno.UI.Xaml.GeneratedWeakEventAttribute",
			static (node, _) => node.IsKind(SyntaxKind.VariableDeclarator) || node.IsKind(SyntaxKind.EventDeclaration),
			static (context, token) =>
			{
				var attribute = context.Attributes[0];
				return new GenerationCandidateData(context.TargetSymbol, attribute);
			});

		var filteredAttributedSymbolsProvider = attributedSymbolsProvider.Where(combined => combined.ContainingTypeIsCandidate);

		var groupedByContainingProvider = filteredAttributedSymbolsProvider
		   .GroupBy(data => data.ContainingTypeFullyQualifiedName, StringComparer.Ordinal);

		context.RegisterSourceOutput(groupedByContainingProvider, GenerateSource);
	}

	private void GenerateSource(SourceProductionContext context, ImmutableArray<GenerationCandidateData> dpCandidatesData)
	{
		var builder = new IndentedStringBuilder();

		builder.AppendLineIndented("// <auto-generated>");
		builder.AppendLineIndented("// ******************************************************************");
		builder.AppendLineIndented($"// This file has been generated by Uno.UI ({nameof(WeakEventGenerator)})");
		builder.AppendLineIndented("// ******************************************************************");
		builder.AppendLineIndented("// </auto-generated>");
		builder.AppendLine();
		builder.AppendLineIndented("#pragma warning disable 1591 // Ignore missing XML comment warnings");
		builder.AppendLineIndented("using System;");
		builder.AppendLineIndented("using System.Linq;");
		builder.AppendLineIndented("using System.Collections.Generic;");
		builder.AppendLineIndented("using System.Collections;");
		builder.AppendLineIndented("using System.Diagnostics.CodeAnalysis;");
		builder.AppendLineIndented("using Uno.Disposables;");
		builder.AppendLineIndented("using System.Runtime.CompilerServices;");
		builder.AppendLineIndented("using Uno.UI;");
		builder.AppendLineIndented("using Uno.UI.DataBinding;");
		builder.AppendLineIndented("using Microsoft.UI.Xaml;");
		builder.AppendLineIndented("using Microsoft.UI.Xaml.Controls;");
		builder.AppendLineIndented("using Microsoft.UI.Xaml.Data;");
		builder.AppendLineIndented("using Uno.Diagnostics.Eventing;");

		using (builder.BlockInvariant($"namespace {dpCandidatesData[0].ContainingNamespace}"))
		{
			using (builder.BlockInvariant($"partial class {dpCandidatesData[0].ContainingTypeName}"))
			{
				foreach (var dpCandidateData in dpCandidatesData)
				{
					GenerateProperty(builder, dpCandidateData);
				}
			}
		}

		context.AddSource(dpCandidatesData[0].ContainingTypeHintName, builder.ToString());
	}

	private void GenerateProperty(IndentedStringBuilder builder, GenerationCandidateData dpCandidateData)
	{
		builder.AppendLineIndented($"/// <summary> Registers an event handler on the <see ref=\"{dpCandidateData.EventName}\" /> event</summary>");
		builder.AppendLineIndented($"/// <remarks>Make sure to register an actual method, not a lambda to ensure that the reference stays alive</remarks>");
		using (builder.BlockInvariant($"internal global::System.IDisposable RegisterWeak{dpCandidateData.EventName}({dpCandidateData.EventType} handler)"))
		{
			builder.AppendLineIndented("var handlerRef = global::Uno.UI.DataBinding.WeakReferencePool.RentWeakReference(this, handler);");

			using (builder.BlockInvariant($"{dpCandidateData.EventType} weakHandler = ({dpCandidateData.LambdaParameters}) => "))
			{
				using (builder.BlockInvariant($"if (handlerRef.Target is {dpCandidateData.EventType} handler2)"))
				{
					builder.AppendLineIndented($"handler2.Invoke({dpCandidateData.LambdaParameters});");
				}
			}

			builder.AppendLineIndented(";");

			builder.AppendLineIndented($"{dpCandidateData.EventName} += weakHandler;");

			using (builder.BlockInvariant($"return global::Uno.Disposables.Disposable.Create(() =>"))
			{
				builder.AppendLineIndented($"{dpCandidateData.EventName} -= weakHandler;");
				builder.AppendLineIndented("global::Uno.UI.DataBinding.WeakReferencePool.ReturnWeakReference(this, handlerRef);");
			}

			builder.AppendLineIndented($");");
		}
	}
}
